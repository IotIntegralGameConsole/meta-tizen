From: Jaska Uimonen <jaska.uimonen@intel.com>
Date: Wed, 5 Dec 2012 09:53:12 +0200
Subject: node-manager: adding node support for pactl

Change-Id: Id6badeba2181ef4afa9842307e4c6c60f72c472f
Signed-off-by: Jaska Uimonen <jaska.uimonen@intel.com>
---
 src/utils/pactl.c | 75 ++++++++++++++++++++++++++++++++++++++++++++++++++++---
 1 file changed, 72 insertions(+), 3 deletions(-)

diff --git a/src/utils/pactl.c b/src/utils/pactl.c
index 40e6689..1d8faa4 100644
--- a/src/utils/pactl.c
+++ b/src/utils/pactl.c
@@ -38,6 +38,7 @@
 
 #include <pulse/pulseaudio.h>
 #include <pulse/ext-device-restore.h>
+#include <pulse/ext-node-manager.h>
 
 #include <pulsecore/i18n.h>
 #include <pulsecore/macro.h>
@@ -97,6 +98,10 @@ static int actions = 1;
 
 static bool nl = false;
 
+static uint32_t src_node_id;
+static uint32_t dst_node_id;
+static uint32_t conn_id;
+
 static enum {
     NONE,
     EXIT,
@@ -127,7 +132,9 @@ static enum {
     SET_SOURCE_OUTPUT_MUTE,
     SET_SINK_FORMATS,
     SET_PORT_LATENCY_OFFSET,
-    SUBSCRIBE
+    SUBSCRIBE,
+    NODE_CONNECT,
+    NODE_DISCONNECT
 } action = NONE;
 
 static void quit(int ret) {
@@ -1007,6 +1014,30 @@ static void source_output_toggle_mute_callback(pa_context *c, const pa_source_ou
     pa_operation_unref(pa_context_set_source_output_mute(c, o->index, !o->mute, simple_callback, NULL));
 }
 
+static void node_list_callback(pa_context *c,
+			       const pa_ext_node_manager_info *info,
+			       int eol,
+			       void *userdata) {
+
+    if (!eol) {
+	const char *node_id = pa_proplist_gets(info->props, "index");
+	if (node_id != NULL) {
+	    printf("Node #%s (%s)\n", node_id, info->name);
+	    printf("%s\n", pa_proplist_to_string(info->props));
+	}
+    } else
+	complete_action();
+}
+
+static void node_connect_callback(pa_context *c,
+			    uint32_t conne_id,
+			    void *userdata) {
+
+    printf("New connection id: %d\n", conne_id);
+
+    complete_action();
+}
+
 /* PA_MAX_FORMATS is defined in internal.h so we just define a sane value here */
 #define MAX_FORMATS 256
 
@@ -1212,6 +1243,8 @@ static void context_state_callback(pa_context *c, void *userdata) {
                             pa_operation_unref(pa_context_get_sample_info_list(c, get_sample_info_callback, NULL));
                         else if (pa_streq(list_type, "cards"))
                             pa_operation_unref(pa_context_get_card_info_list(c, get_card_info_callback, NULL));
+			else if (pa_streq(list_type, "nodes"))
+			    pa_operation_unref(pa_ext_node_manager_read_nodes(c, node_list_callback, NULL));
                         else
                             pa_assert_not_reached();
                     } else {
@@ -1373,6 +1406,18 @@ static void context_state_callback(pa_context *c, void *userdata) {
                                               NULL,
                                               NULL));
                     break;
+	        case NODE_CONNECT:
+		    pa_operation_unref(pa_ext_node_manager_connect_nodes(c,
+									 src_node_id,
+									 dst_node_id,
+									 node_connect_callback,
+									 NULL));
+		    break;
+	        case NODE_DISCONNECT:
+		    pa_operation_unref(pa_ext_node_manager_disconnect_nodes(c, conn_id,
+									simple_callback,
+									NULL));
+		    break;
 
                 default:
                     pa_assert_not_reached();
@@ -1494,6 +1539,9 @@ static void help(const char *argv0) {
     printf("%s %s %s\n",    argv0, _("[options]"), "subscribe");
     printf(_("\nThe special names @DEFAULT_SINK@, @DEFAULT_SOURCE@ and @DEFAULT_MONITOR@\n"
              "can be used to specify the default sink, source and monitor.\n"));
+    printf("%s %s %s\n",    argv0, _("[options]"), "node-list ");
+    printf("%s %s %s %s %s\n", argv0, _("[options]"), "node-connect ", _("#N"), _("#N"));
+    printf("%s %s %s %s\n", argv0, _("[options]"), "node-disconnect ", _("#N"));
 
     printf(_("\n"
              "  -h, --help                            Show this help\n"
@@ -1590,7 +1638,7 @@ int main(int argc, char *argv[]) {
                 if (pa_streq(argv[i], "modules") || pa_streq(argv[i], "clients") ||
                     pa_streq(argv[i], "sinks")   || pa_streq(argv[i], "sink-inputs") ||
                     pa_streq(argv[i], "sources") || pa_streq(argv[i], "source-outputs") ||
-                    pa_streq(argv[i], "samples") || pa_streq(argv[i], "cards")) {
+                    pa_streq(argv[i], "samples") || pa_streq(argv[i], "cards") || pa_streq(argv[i], "nodes")) {
                     list_type = pa_xstrdup(argv[i]);
                 } else if (pa_streq(argv[i], "short")) {
                     short_list_format = true;
@@ -1960,7 +2008,28 @@ int main(int argc, char *argv[]) {
                 goto quit;
             }
 
-        } else if (pa_streq(argv[optind], "help")) {
+        } else if (pa_streq(argv[optind], "node-connect")) {
+	    action = NODE_CONNECT;
+
+	    if (argc != optind+3) {
+		pa_log(_("You have to specify a source and destination node indexes"));
+		goto quit;
+	    }
+
+	    src_node_id = (uint32_t) atoi(argv[optind+1]);
+	    dst_node_id = (uint32_t) atoi(argv[optind+2]);
+
+	} else if (pa_streq(argv[optind], "node-disconnect")) {
+	    action = NODE_DISCONNECT;
+
+	    if (argc != optind+2) {
+		pa_log(_("You have to specify a connection id"));
+		goto quit;
+	    }
+
+	    conn_id = (uint32_t) atoi(argv[optind+1]);
+
+	} else if (pa_streq(argv[optind], "help")) {
             help(bn);
             ret = 0;
             goto quit;
