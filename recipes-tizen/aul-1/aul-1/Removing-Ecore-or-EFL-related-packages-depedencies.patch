From 1d140d85b41a8c7a5c696a1253d82b4b29038aa6 Mon Sep 17 00:00:00 2001
From: Xavier Roche <xavrock.os@gmail.com>
Date: Wed, 11 Jun 2014 16:32:18 +0200
Subject: [PATCH] Removing Ecore or EFL related packages depedencies

Signed-off-by: Xavier Roche <xavrock.os@gmail.com>
---
 CMakeLists.txt         |   39 ++++++++++++++++++++-------------------
 am_daemon/amd_key.c    |   40 ++++++++++++++++++++--------------------
 am_daemon/amd_main.c   |   32 ++++++++++++++++----------------
 am_daemon/amd_status.c |   10 +++++-----
 include/SLP_AUL_PG.h   |    6 +++---
 test/app_test.c        |   11 ++++++-----
 test/aul_test.c        |   24 ++++++++++++------------
 test/launch_app.c      |   16 ++++++++--------
 test/open_app.c        |   18 +++++++++---------
 9 files changed, 99 insertions(+), 97 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index af23cb0..d39a7e2 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -19,15 +19,16 @@ MESSAGE("Build type: ${CMAKE_BUILD_TYPE}")
 
 # Set required packages
 INCLUDE(FindPkgConfig)
-SET(AUL-1_PKG_CHECK_MODULES dlog ecore libprivilege-control app-checker rua glib-2.0 ecore-input evas vconf pkgmgr-info privacy-manager-client)
+SET(AUL-1_PKG_CHECK_MODULES dlog libprivilege-control app-checker rua glib-2.0 vconf pkgmgr-info privacy-manager-client)
 OPTION(WITH_WAYLAND "Build with wayland" OFF)
-IF(WITH_WAYLAND)
-    ADD_DEFINITIONS("-DWAYLAND")
-    pkg_check_modules(pkgs REQUIRED ${AUL-1_PKG_CHECK_MODULES} ecore-wayland)
-ELSE(WITH_WAYLAND)
-    ADD_DEFINITIONS("-DX11")
-    pkg_check_modules(pkgs REQUIRED  ${AUL-1_PKG_CHECK_MODULES} x11 ecore-x)
-ENDIF(WITH_WAYLAND)
+#IF(WITH_WAYLAND)
+#    ADD_DEFINITIONS("-DWAYLAND")
+#    pkg_check_modules(pkgs REQUIRED ${AUL-1_PKG_CHECK_MODULES} ecore-wayland)
+#ELSE(WITH_WAYLAND)
+#    ADD_DEFINITIONS("-DX11")
+#    pkg_check_modules(pkgs REQUIRED  ${AUL-1_PKG_CHECK_MODULES} x11 ecore-x)
+#ENDIF(WITH_WAYLAND)
+pkg_check_modules(pkgs REQUIRED  ${AUL-1_PKG_CHECK_MODULES} )
 
 pkg_check_modules(libpkgs REQUIRED dlog bundle dbus-glib-1 ail xdgmime app-checker libtzplatform-config)
 PKG_CHECK_MODULES(PKGS REQUIRED glib-2.0 gio-2.0 dlog bundle)
@@ -100,16 +101,16 @@ SET_TARGET_PROPERTIES(aul PROPERTIES VERSION ${VERSION})
 
 # launchpad(old avatar) daemon
 SET(AVATAR_NAME "launchpad_preloading_preinitializing_daemon")
-IF (WITH_WAYLAND)
+#IF (WITH_WAYLAND)
 add_executable(${AVATAR_NAME}
         launchpad_src/launchpad.c
         )
-ELSE(WITH_WAYLAND)
-add_executable(${AVATAR_NAME}
-	launchpad_src/launchpad.c
-	launchpad_src/util_x.c
-	)
-ENDIF(WITH_WAYLAND)
+#ELSE(WITH_WAYLAND)
+#{add_executable(${AVATAR_NAME}
+#	launchpad_src/launchpad.c
+#	launchpad_src/util_x.c
+#	)
+#ENDIF(WITH_WAYLAND)
 
 MESSAGE("       "${pkgs_LDFLAGS})
 target_link_libraries(${AVATAR_NAME} aul_mods aul ${pkgs_LDFLAGS} ${LIB_DL})
@@ -127,11 +128,11 @@ add_executable(amd
 		am_daemon/amd_status.c
                 )
 SET(AUL-1_LINK_LIBRARY amd aul_mods app-checker-server rua glib-2.0 bundle ail aul)
-IF (WITH_WAYLAND)
+#IF (WITH_WAYLAND)
 target_link_libraries(${AUL-1_LINK_LIBRARY} ${pkgs_LDFLAGS})
-ELSE(WITH_WAYLAND)
-target_link_libraries(${AUL-1_LINK_LIBRARY} utilX ${pkgs_LDFLAGS})
-ENDIF(WITH_WAYLAND)
+#ELSE(WITH_WAYLAND)
+#target_link_libraries(${AUL-1_LINK_LIBRARY} utilX ${pkgs_LDFLAGS})
+#ENDIF(WITH_WAYLAND)
 
 SET(REL_AGENT daemon-manager-release-agent)
 ADD_EXECUTABLE(${REL_AGENT} agent/${REL_AGENT}.c)
diff --git a/am_daemon/amd_key.c b/am_daemon/amd_key.c
index 4725889..3943b70 100755
--- a/am_daemon/amd_key.c
+++ b/am_daemon/amd_key.c
@@ -19,16 +19,16 @@
  *
  */
 
-#include <Ecore.h>
-#include <Evas.h>
-#include <Ecore_Input.h>
-#ifdef X11
-#include <Ecore_X.h>
-#include <utilX.h>
-#endif
-#ifdef WAYLAND
-#include <Ecore_Wayland.h>
-#endif
+//#include <Ecore.h>
+//#include <Evas.h>
+//#include <Ecore_Input.h>
+//#ifdef X11
+//#include <Ecore_X.h>
+//#include <utilX.h>
+//#endif
+//#ifdef WAYLAND
+//#include <Ecore_Wayland.h>
+//#endif
 #include <aul.h>
 #include <glib.h>
 
@@ -37,7 +37,7 @@
 #include "app_sock.h"
 #include "launch.h"
 
-static struct {
+/*static struct {
 	Evas_Object *win;
 	Ecore_Event_Handler *key_up;
 	Ecore_Event_Handler *key_down;
@@ -45,14 +45,14 @@ static struct {
 	.win = NULL,
 	.key_up = NULL,
 	.key_down = NULL,
-};
+};*/
 
 GSList *key_pid_list = NULL;
 
-static Eina_Bool __key_release_cb(void *data, int type, void *event);
-static Eina_Bool __key_press_cb(void *data, int type, void *event);
+//static Eina_Bool __key_release_cb(void *data, int type, void *event);
+//static Eina_Bool __key_press_cb(void *data, int type, void *event);
 
-static Eina_Bool __key_release_cb(void *data, int type, void *event)
+/*static Eina_Bool __key_release_cb(void *data, int type, void *event)
 {
 	Evas_Event_Key_Up *ev = event;
 	int ret;
@@ -83,10 +83,10 @@ static Eina_Bool __key_release_cb(void *data, int type, void *event)
 	}
 
 	return ECORE_CALLBACK_RENEW;
-}
+}*/
 
 
-static Eina_Bool __key_press_cb(void *data, int type, void *event)
+/*static Eina_Bool __key_press_cb(void *data, int type, void *event)
 {
 	Evas_Event_Key_Down *ev = event;
 	int ret;
@@ -117,7 +117,7 @@ static Eina_Bool __key_press_cb(void *data, int type, void *event)
 	}
 
 	return ECORE_CALLBACK_RENEW;
-}
+}*/
 
 int _register_key_event(int pid)
 {
@@ -171,7 +171,7 @@ int _unregister_key_event(int pid)
 
 int _key_init()
 {
-#ifdef X11
+/*#ifdef X11
 	key_info.win = ecore_x_window_input_new(0, 0, 0, 1, 1);
 	if (!key_info.win) {
 		_D("Failed to create hidden window");
@@ -198,7 +198,7 @@ int _key_init()
 	if (!key_info.key_down) {
 		_D("Failed to register a key down event handler");
 	}
-#endif // X11
+#endif // X11*/
 
 	return 0;
 }
diff --git a/am_daemon/amd_main.c b/am_daemon/amd_main.c
index 4b29192..8c60700 100755
--- a/am_daemon/amd_main.c
+++ b/am_daemon/amd_main.c
@@ -23,16 +23,16 @@
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <fcntl.h>
-#include <Ecore.h>
-#include <Ecore_Input.h>
-#include <Evas.h>
-#ifdef X11
-#include <Ecore_X.h>
-#include <utilX.h>
-#endif
-#ifdef WAYLAND
-#include <Ecore_Wayland.h>
-#endif
+//#include <Ecore.h>
+//#include <Ecore_Input.h>
+//#include <Evas.h>
+//#ifdef X11
+//#include <Ecore_X.h>
+//#include <utilX.h>
+//#endif
+//#ifdef WAYLAND
+//#include <Ecore_Wayland.h>
+//#endif
 #include <aul.h>
 #include <vconf.h>
 #include <app-checker-server.h>
@@ -258,16 +258,16 @@ static int __init()
 
 	int ret;
 
-	ecore_init();
-	evas_init();
-	ecore_event_init();
-#ifdef X11
+	//ecore_init();
+	//evas_init();
+	//ecore_event_init();
+/*#ifdef X11
 	ret = ecore_x_init(NULL);
 	_D("ecore_x_init initialized %d times\n", ret);
 #endif
 #ifdef WAYLAND
     ecore_wl_init(NULL);
-#endif
+#endif*/
 
 	appinfo_init(&amd.af);
 	cgutil_create(MOUNT_PATH, AGENT_PATH, &amd.cg);
@@ -312,7 +312,7 @@ int main(int argc, char *argv[])
 
 	g_idle_add(__amd_ready, NULL);
 
-	ecore_main_loop_begin();
+	//ecore_main_loop_begin();
 
 	return 0;
 }
diff --git a/am_daemon/amd_status.c b/am_daemon/amd_status.c
index d1e70f0..551139a 100755
--- a/am_daemon/amd_status.c
+++ b/am_daemon/amd_status.c
@@ -24,7 +24,7 @@
 #include <glib.h>
 #include <aul.h>
 #include <string.h>
-#include <Ecore.h>
+//#include <Ecore.h>
 
 #include "amd_config.h"
 #include "amd_status.h"
@@ -69,7 +69,7 @@ int _status_add_app_info_list(char *appid, char *app_path, int pid, int pad_pid)
 	return 0;
 }
 
-static Eina_Bool __app_terminate_timer_cb(void *data)
+static int __app_terminate_timer_cb(void *data)
 {
 	int pid = (int)data;
 	int ret = 0;
@@ -80,7 +80,7 @@ static Eina_Bool __app_terminate_timer_cb(void *data)
 	if (ret == -1)
 		_D("send SIGKILL: %s", strerror(errno));
 
-	return ECORE_CALLBACK_CANCEL;
+	return ret;
 }
 
 int _status_update_app_info_list(int pid, int status)
@@ -93,10 +93,10 @@ int _status_update_app_info_list(int pid, int status)
 		info_t = (app_status_info_t *)iter->data;
 		if(pid == info_t->pid) {
 			info_t->status = status;
-			if(status == STATUS_DYING) {
+			/*if(status == STATUS_DYING) {
 				if(info_t->pad_pid != DEBUG_LAUNCHPAD_PID)
 					ecore_timer_add(2, __app_terminate_timer_cb, info_t->pid);
-			}
+			}*/
 			break;
 		}
 	}
diff --git a/include/SLP_AUL_PG.h b/include/SLP_AUL_PG.h
index 60fe408..8166b7d 100755
--- a/include/SLP_AUL_PG.h
+++ b/include/SLP_AUL_PG.h
@@ -211,7 +211,7 @@ int main(int argc, char *argv[])
 // Callee application
 #include <aul.h>
 #include <bundle.h>
-#include <Ecore.h>
+//#include <Ecore.h>
 
 static int aul_handler(aul_type type, bundle *kb,void* data)
 {
@@ -234,13 +234,13 @@ static int aul_handler(aul_type type, bundle *kb,void* data)
 
 int main(int argc, char** argv)
 {
-	ecore_init();
+	//ecore_init();
 
 	aul_launch_init(aul_handler,NULL);
 	// enable this if you want to handle at aul_handler when launch
 	aul_launch_argv_handler(argc, argv);
 
-	ecore_main_loop_begin();  // You must need ecore or glib mainloop
+	//ecore_main_loop_begin();  // You must need ecore or glib mainloop
 	return 0;
 } 
 @endcode
diff --git a/test/app_test.c b/test/app_test.c
index d92da2a..ce75ddc 100755
--- a/test/app_test.c
+++ b/test/app_test.c
@@ -22,11 +22,12 @@
 #include <poll.h>
 #include <stdio.h>
 #include <unistd.h>
+#include <sys/time.h>
 #include "aul.h"
 
 /* ecore-glib integration */
 
-#include <Ecore.h>
+//#include <Ecore.h>
 
 extern int aul_listen_app_dead_signal(int (*func) (int, void *), void *data);
 
@@ -44,7 +45,7 @@ void do_resume()
 	printf("=================================\n");
 }
 
-static Eina_Bool send_result(void *data)
+static int send_result(void *data)
 {
 	bundle *kb;
 	bundle *res_b;
@@ -94,7 +95,7 @@ int do_start(void *data)
 
 	bundle_iterate(kb, prt_bundle, NULL);
 
-	ecore_timer_add(5, send_result, bundle_dup(kb));
+	//ecore_timer_add(5, send_result, bundle_dup(kb));
 
 	return 0;
 }
@@ -134,7 +135,7 @@ int app_launch_handler(int pid, void *data)
 __attribute__ ((visibility("default")))
 int main(int argc, char **argv)
 {
-	ecore_init();
+	//ecore_init();
 
 	do_create();
 
@@ -152,7 +153,7 @@ int main(int argc, char **argv)
 		exit(0);
 	}
 
-	ecore_main_loop_begin();
+	//ecore_main_loop_begin();
 	return 0;
 }
 
diff --git a/test/aul_test.c b/test/aul_test.c
index c912951..ef40ab7 100755
--- a/test/aul_test.c
+++ b/test/aul_test.c
@@ -24,7 +24,7 @@
 #include <stdio.h>
 #include <sys/time.h>
 #include <unistd.h>
-#include <Ecore.h>
+//#include <Ecore.h>
 
 #include "menu_db_util.h"
 #include "aul.h"
@@ -121,9 +121,9 @@ static void cb_func(bundle *kb, int is_cancel, void *data)
 		bundle_iterate(kb, prt_recvd_bundle, NULL);
 	}
 
-	if ((strcmp(cmd, "launch_res") == 0)
+	/*if ((strcmp(cmd, "launch_res") == 0)
 	    || (strcmp(cmd, "open_svc_res") == 0))
-		ecore_main_loop_quit();
+		ecore_main_loop_quit();*/
 }
 
 int open_test()
@@ -175,14 +175,14 @@ static test_func_t scn_func[] = {
 	{"n", launch_test, "launch_test", ""}
 };
 
-static Eina_Bool run_all_test(void *data)
+static int run_all_test(void *data)
 {
 	static int pos = 0;
 	int ret;
 
 	if (pos > sizeof(scn_func) / sizeof(test_func_t) - 1) {
 		printf("all internal test done\n");
-		ecore_main_loop_quit();
+		//ecore_main_loop_quit();
 		return 0;
 	}
 
@@ -204,7 +204,7 @@ static Eina_Bool run_all_test(void *data)
 
 int all_test()
 {
-	ecore_timer_add(2, run_all_test, NULL);
+	//ecore_timer_add(2, run_all_test, NULL);
 	return 0;
 }
 
@@ -661,7 +661,7 @@ void print_usage(char *progname)
 		"cmd is internal purpose\n");
 }
 
-static Eina_Bool run_func(void *data)
+static int run_func(void *data)
 {
 	callfunc(cmd);
 
@@ -669,8 +669,8 @@ static Eina_Bool run_func(void *data)
 	    || strcmp(cmd, "dbuslaunch") == 0
 	    || strcmp(cmd, "open_svc_res") == 0)
 		return 0;
-	else
-		ecore_main_loop_quit();
+	/*else
+		ecore_main_loop_quit();*/
 
 	return 0;
 }
@@ -682,7 +682,7 @@ int main(int argc, char **argv)
 		exit(0);
 	}
 
-	ecore_init();
+	//ecore_init();
 
 	cmd = argv[1];
 	gargc = argc;
@@ -694,9 +694,9 @@ int main(int argc, char **argv)
 	/*aul_listen_app_dead_signal(dead_tracker,NULL); */
 	/*aul_listen_app_dead_signal(NULL,NULL); */
 
-	ecore_idler_add(run_func, NULL);
+	/*ecore_idler_add(run_func, NULL);
 
-	ecore_main_loop_begin();
+	ecore_main_loop_begin();*/
 
 	return 0;
 }
diff --git a/test/launch_app.c b/test/launch_app.c
index 47b9b2d..6cd1cfe 100755
--- a/test/launch_app.c
+++ b/test/launch_app.c
@@ -24,7 +24,7 @@
 #include <unistd.h>
 #include <sys/types.h>
 
-#include <Ecore.h>
+//#include <Ecore.h>
 #include "aul.h"
 
 #define ROOT_UID 0
@@ -110,7 +110,7 @@ static int __launch_app_dead_handler(int pid, void *data)
 	return 0;
 }
 
-static Eina_Bool run_func(void *data)
+static int run_func(void *data)
 {
 	int pid = -1;
 	char *str = NULL;
@@ -121,12 +121,12 @@ static Eina_Bool run_func(void *data)
 
 		if( str && strcmp(str, "SYNC") == 0 ) {
 			aul_listen_app_dead_signal(__launch_app_dead_handler, pid);
-		} else {
+		} /*else {
 			ecore_main_loop_quit();
-        }
+        }*/
 	} else {
 		printf("... launch failed\n");
-		ecore_main_loop_quit();
+		//ecore_main_loop_quit();
 	}
 
 	if (kb) {
@@ -145,16 +145,16 @@ int main(int argc, char **argv)
 		exit(EXIT_FAILURE);
 	}
 
-	ecore_init();
+	//ecore_init();
 
 	gargc = argc;
 	gargv = argv;
 
 	aul_launch_init(NULL, NULL);
 
-	ecore_idler_add(run_func, NULL);
+	//ecore_idler_add(run_func, NULL);
 
-	ecore_main_loop_begin();
+	//ecore_main_loop_begin();
 
 	return 0;
 }
diff --git a/test/open_app.c b/test/open_app.c
index d9b677c..49eb4f5 100755
--- a/test/open_app.c
+++ b/test/open_app.c
@@ -24,7 +24,7 @@
 #include <unistd.h>
 #include <sys/types.h>
 
-#include <Ecore.h>
+//#include <Ecore.h>
 #include "aul.h"
 
 #define ROOT_UID 0
@@ -104,13 +104,13 @@ static int __launch_app_dead_handler(int pid, void *data)
 {
 	int listen_pid = (int) data;
 
-	if(listen_pid == pid)
-		ecore_main_loop_quit();
+	/*if(listen_pid == pid)
+		ecore_main_loop_quit();*/
 
 	return 0;
 }
 
-static Eina_Bool run_func(void *data)
+static int run_func(void *data)
 {
 	int pid = -1;
 	char *str = NULL;
@@ -124,9 +124,9 @@ static Eina_Bool run_func(void *data)
 
 	if( str && strcmp(str, "SYNC") == 0 ) {
 		aul_listen_app_dead_signal(__launch_app_dead_handler, pid);
-	} else {
+	} /*else {
 		ecore_main_loop_quit();
-	}
+	}*/
 
 	if (kb) {
 		bundle_free(kb);
@@ -143,16 +143,16 @@ int main(int argc, char **argv)
 		exit(EXIT_FAILURE);
 	}
 
-	ecore_init();
+	//ecore_init();
 
 	gargc = argc;
 	gargv = argv;
 
 	aul_launch_init(NULL, NULL);
 
-	ecore_idler_add(run_func, NULL);
+	//ecore_idler_add(run_func, NULL);
 
-	ecore_main_loop_begin();
+	//ecore_main_loop_begin();
 
 	return 0;
 }
-- 
1.7.9.5

